package pageobjects;
import java.util.List;
import java.util.Map;
import org.openqa.selenium.support.CacheLookup;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

public class FlightConfirmationPage {
    private Map<String, String> data;
    private WebDriver driver;
    private int timeout = 15;

    @FindBy(css = "div table tbody tr td:nth-of-type(1) table tbody tr td table tbody tr td table tbody tr:nth-of-type(4) td:nth-of-type(2) font a")
    @CacheLookup
    private WebElement carRentals;

    @FindBy(css = "div table tbody tr td:nth-of-type(2) table tbody tr:nth-of-type(2) td table tbody tr td:nth-of-type(4) a")
    @CacheLookup
    private WebElement contact;

    @FindBy(css = "a[href='mercurycruise.php']")
    @CacheLookup
    private WebElement cruises;

    @FindBy(css = "div table tbody tr td:nth-of-type(1) table tbody tr td table tbody tr td table tbody tr:nth-of-type(6) td:nth-of-type(2) a")
    @CacheLookup
    private WebElement destinations;

    @FindBy(css = "div table tbody tr td:nth-of-type(1) table tbody tr td table tbody tr td table tbody tr:nth-of-type(2) td:nth-of-type(2) a")
    @CacheLookup
    private WebElement flights;

    @FindBy(css = "div table tbody tr td:nth-of-type(1) table tbody tr td table tbody tr td table tbody tr:nth-of-type(1) td:nth-of-type(2) font a")
    @CacheLookup
    private WebElement home;

    @FindBy(css = "div table tbody tr td:nth-of-type(1) table tbody tr td table tbody tr td table tbody tr:nth-of-type(3) td:nth-of-type(2) a")
    @CacheLookup
    private WebElement hotels;

    private final String pageLoadedText = "11/11/2018 @ 5:03 w/ Blue Skies Airlines 360";

    private final String pageUrl = "/mercurypurchase2.php";

    @FindBy(css = "a[href='mercuryregister.php']")
    @CacheLookup
    private WebElement register;

    @FindBy(css = "div table tbody tr td:nth-of-type(2) table tbody tr:nth-of-type(2) td table tbody tr td:nth-of-type(1) a")
    @CacheLookup
    private WebElement signoff;

    @FindBy(css = "div table tbody tr td:nth-of-type(2) table tbody tr:nth-of-type(2) td table tbody tr td:nth-of-type(3) a")
    @CacheLookup
    private WebElement support;

    @FindBy(css = "div table tbody tr td:nth-of-type(1) table tbody tr td table tbody tr td table tbody tr:nth-of-type(7) td:nth-of-type(2) a")
    @CacheLookup
    private WebElement vacations;

    public FlightConfirmationPage() {
    }

    public FlightConfirmationPage(WebDriver driver) {
        this();
        this.driver = driver;
    }

    public FlightConfirmationPage(WebDriver driver, Map<String, String> data) {
        this(driver);
        this.data = data;
    }

    public FlightConfirmationPage(WebDriver driver, Map<String, String> data, int timeout) {
        this(driver, data);
        this.timeout = timeout;
    }

    /**
     * Click on Car Rentals Link.
     *
     * @return the FlightConfirmationPage class instance.
     */
    public FlightConfirmationPage clickCarRentalsLink() {
        carRentals.click();
        return this;
    }

    /**
     * Click on Contact Link.
     *
     * @return the FlightConfirmationPage class instance.
     */
    public FlightConfirmationPage clickContactLink() {
        contact.click();
        return this;
    }

    /**
     * Click on Cruises Link.
     *
     * @return the FlightConfirmationPage class instance.
     */
    public FlightConfirmationPage clickCruisesLink() {
        cruises.click();
        return this;
    }

    /**
     * Click on Destinations Link.
     *
     * @return the FlightConfirmationPage class instance.
     */
    public FlightConfirmationPage clickDestinationsLink() {
        destinations.click();
        return this;
    }

    /**
     * Click on Flights Link.
     *
     * @return the FlightConfirmationPage class instance.
     */
    public FlightConfirmationPage clickFlightsLink() {
        flights.click();
        return this;
    }

    /**
     * Click on Home Link.
     *
     * @return the FlightConfirmationPage class instance.
     */
    public FlightConfirmationPage clickHomeLink() {
        home.click();
        return this;
    }

    /**
     * Click on Hotels Link.
     *
     * @return the FlightConfirmationPage class instance.
     */
    public FlightConfirmationPage clickHotelsLink() {
        hotels.click();
        return this;
    }

    /**
     * Click on Register Link.
     *
     * @return the FlightConfirmationPage class instance.
     */
    public FlightConfirmationPage clickRegisterLink() {
        register.click();
        return this;
    }

    /**
     * Click on Signoff Link.
     *
     * @return the FlightConfirmationPage class instance.
     */
    public FlightConfirmationPage clickSignoffLink() {
        signoff.click();
        return this;
    }

    /**
     * Click on Support Link.
     *
     * @return the FlightConfirmationPage class instance.
     */
    public FlightConfirmationPage clickSupportLink() {
        support.click();
        return this;
    }

    /**
     * Click on Vacations Link.
     *
     * @return the FlightConfirmationPage class instance.
     */
    public FlightConfirmationPage clickVacationsLink() {
        vacations.click();
        return this;
    }

    /**
     * Verify that the page loaded completely.
     *
     * @return the FlightConfirmationPage class instance.
     */
    public FlightConfirmationPage verifyPageLoaded() {
        (new WebDriverWait(driver, timeout)).until(new ExpectedCondition<Boolean>() {
            public Boolean apply(WebDriver d) {
                return d.getPageSource().contains(pageLoadedText);
            }
        });
        return this;
    }

    /**
     * Verify that current page URL matches the expected URL.
     *
     * @return the FlightConfirmationPage class instance.
     */
    public FlightConfirmationPage verifyPageUrl() {
        (new WebDriverWait(driver, timeout)).until(new ExpectedCondition<Boolean>() {
            public Boolean apply(WebDriver d) {
                return d.getCurrentUrl().contains(pageUrl);
            }
        });
        return this;
    }
}
